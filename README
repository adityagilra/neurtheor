A collection of classes to compute baseline and linear response of populations of spiking neurons \\
in the integral or differential framework.\\
See Gerstner et al book [http://neuronaldynamics.epfl.ch/] for the spike response model of neurons and related integral approach.
See Richardson 2007 for the differential approach on the LIF model.

USAGE (see also my repo: 2015_pop_response):
Integral Approach:
    from neurtheor.IntegralLinResp import IntegralLinResp

    ######## background / baseline calculation
    noise2 = noise**2
    w02factor = 0.5*connprob*N*(tausyn/second)*(w0*R)**2
    
    ilr = IntegralLinResp(runtime/second,\
                bindt/second,-2.0,2.0,
                N,I0*R/volt,tau0/second,
                uth/volt,0.0,noise/volt,\
                w0*R*N/volt,tausyn/second,connprob,
                0.0,0.0)
    ilr.get_background_rate()
    ilr.compute_linfilter()

    # plot the linear response kernel L_SRM(x)
    figure()
    plot(ilr.trange,ilr.L_SRMarray,color='b')
    xlabel('time (s)')
    ylabel('linear SRM response (V s^2)')
    xlim([0.,0.05])
    print "Linear response kernel L_SRM(x) computed."

    # linear response to stimulus
    deltat = 1e-4
    deltaAarray = ilr.compute_deltaA(deltaIarray*R/volt,tstep/second,deltat)
    rateax.plot(ilr.tarray*1000,ilr.A0+deltaAarray,'.-g',label='linevolve')

    basicfig = figure()
    basicax = basicfig.add_subplot(111)

    basicax.plot(ilr.fullt,ilr.hazard(ilr.fullt,I0*R/volt)/1000,\
                    color='c',label='hazard (kHz)')

    basicax.plot(ilr.fullt,ilr.survivor(ilr.fullt,I0*R/volt)*10,\
                    color='m',label='survivor S0 (x10)')
    
    h0 = R * (I0 + totalw_pernrn*tausyn/second*ilr.A0)
    print "Effective input per neuron =",h0
    print "Effective noise per neuron =",sqrt(noise2+w02factor*ilr.A0)
    print "Base population activity from population evolution"\
                        " consistency is A0 =",ilr.A0,"Hz."

    # we can also use the mean ISI and invert it to get the rate.
    ISIdistrib = ilr.ISI(ilr.fullt,I0*R/volt)
    basicax.plot(ilr.fullt,ISIdistrib/10.0,color='y',label='ISIdistrib P0 (/10)')
    normP0 = sum(ISIdistrib)*ilr.fullt_dt
    print "Norm of ISI distribution =",normP0
    meanISI = sum(ilr.fullt*ilr.ISI(ilr.fullt,I0*R/volt))*ilr.fullt_dt
    print "1/meanISI =",1./meanISI,"Hz."
    #basicax.set_xlim([0.0,0.05])
    legend()

Interacting populations:
IntegralPols.py

Differential Approach:
See DiffLIF.py
